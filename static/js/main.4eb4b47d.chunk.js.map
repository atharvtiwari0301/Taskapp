{"version":3,"sources":["App.js","index.js"],"names":["item","id","v4","name","item2","App","useState","text","setText","title","items","state","setState","className","type","value","onChange","e","target","onClick","prev","todo","onDragEnd","destination","source","index","droppableId","itemCopy","splice","_","map","data","key","provided","snapshot","ref","innerRef","droppableProps","el","draggableId","console","log","isDragging","draggableProps","dragHandleProps","placeholder","ReactDOM","render","document","getElementById"],"mappings":"4RAOMA,EAAO,CACXC,GAAIC,cACJC,KAAM,IAGFC,EAAQ,CACZH,GAAIC,cACJC,KAAM,IAuHOE,MApHf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,CACjC,KAAQ,CACNG,MAAO,OACPC,MAAO,CAACV,EAAMI,IAEhB,cAAe,CACbK,MAAO,cACPC,MAAO,IAET,KAAQ,CACND,MAAO,YACPC,MAAO,MAXX,mBAAOC,EAAP,KAAcC,EAAd,KA4DA,OACE,sBAAKC,UAAU,YAAf,UACE,0CACA,sBAAKA,UAAU,MAAf,UACE,uBAAOC,KAAK,OAAOC,MAAOR,EAAMS,SAAU,SAACC,GAAD,OAAOT,EAAQS,EAAEC,OAAOH,UAClE,wBAAQI,QAzBE,WACdP,GAAS,SAAAQ,GACP,OAAO,2BACFA,GADL,IAEEC,KAAM,CACJZ,MAAO,OACPC,MAAM,CACJ,CACET,GAAIC,cACJC,KAAMI,IAHL,mBAKAa,EAAKC,KAAKX,cAMrBF,EAAQ,KAQJ,yBAEF,qBAAKK,UAAU,MAAf,SACE,cAAC,IAAD,CAAiBS,UArDD,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,YAAaC,EAAa,EAAbA,OACpC,GAAKD,IAIDA,EAAYE,QAAUD,EAAOC,OAASF,EAAYG,cAAgBF,EAAOE,aAA7E,CAKA,IAAMC,EAAQ,eAAQhB,EAAMa,EAAOE,aAAahB,MAAMc,EAAOC,QAE7Db,GAAS,SAAAQ,GASP,OARAA,EAAI,eAAQA,IAEPI,EAAOE,aAAahB,MAAMkB,OAAOJ,EAAOC,MAAO,GAIpDL,EAAKG,EAAYG,aAAahB,MAAMkB,OAAOL,EAAYE,MAAO,EAAGE,GAE1DP,OAgCL,SACGS,IAAEC,IAAInB,GAAO,SAACoB,EAAMC,GACnB,OACE,sBAAenB,UAAW,SAA1B,UACE,6BAAKkB,EAAKtB,QACV,cAAC,IAAD,CAAWiB,YAAaM,EAAxB,SACG,SAACC,EAAUC,GACV,OACE,8CACEC,IAAKF,EAASG,UACVH,EAASI,gBAFf,IAGExB,UAAW,gBAHb,UAKGkB,EAAKrB,MAAMoB,KAAI,SAACQ,EAAIb,GACnB,OACE,cAAC,IAAD,CAAuBA,MAAOA,EAAOc,YAAaD,EAAGrC,GAArD,SACG,SAACgC,EAAUC,GAEV,OADAM,QAAQC,IAAIP,GAEV,yDACErB,UAAS,eAAUqB,EAASQ,YAAc,YAC1CP,IAAKF,EAASG,UACVH,EAASU,gBACTV,EAASW,iBAJf,aAMGN,EAAGnC,UAVImC,EAAGrC,OAiBtBgC,EAASY,qBA7BVb,cCrFxBc,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.4eb4b47d.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport _ from \"lodash\";\nimport { v4 } from \"uuid\";\n\n\nconst item = {\n  id: v4(),\n  name: \"\"\n}\n\nconst item2 = {\n  id: v4(),\n  name: \"\"\n}\n\nfunction App() {\n  const [text, setText] = useState(\"\")\n  const [state, setState] = useState({\n    \"todo\": {\n      title: \"Todo\",\n      items: [item, item2]\n    },\n    \"in-progress\": {\n      title: \"In Progress\",\n      items: []\n    },\n    \"done\": {\n      title: \"Completed\",\n      items: []\n    }\n  })\n\n  const handleDragEnd = ({ destination, source }) => {\n    if (!destination) {\n      return\n    }\n\n    if (destination.index === source.index && destination.droppableId === source.droppableId) {\n      return\n    }\n\n    // Creating a copy of item before removing it from state\n    const itemCopy = { ...state[source.droppableId].items[source.index] }\n\n    setState(prev => {\n      prev = { ...prev }\n      // Remove from previous items array\n      prev[source.droppableId].items.splice(source.index, 1)\n\n\n      // Adding to new items array location\n      prev[destination.droppableId].items.splice(destination.index, 0, itemCopy)\n\n      return prev\n    })\n  }\n\n  const addItem = () => {\n    setState(prev => {\n      return {\n        ...prev,\n        todo: {\n          title: \"Todo\",\n          items: [\n            {\n              id: v4(),\n              name: text\n            },\n            ...prev.todo.items\n          ]\n        }\n      }\n    })\n\n    setText(\"\")\n  }\n\n  return (\n    <div className='container'>\n      <h2>Projects</h2>\n      <div className='add'>\n        <input type=\"text\" value={text} onChange={(e) => setText(e.target.value)} />\n        <button onClick={addItem}>ADD TASK</button>\n      </div>\n      <div className=\"App\">\n        <DragDropContext onDragEnd={handleDragEnd}>\n          {_.map(state, (data, key) => {\n            return (\n              <div key={key} className={\"column\"}>\n                <h3>{data.title}</h3>\n                <Droppable droppableId={key}>\n                  {(provided, snapshot) => {\n                    return (\n                      <div\n                        ref={provided.innerRef}\n                        {...provided.droppableProps}\n                        className={\"droppable-col\"}\n                      >\n                        {data.items.map((el, index) => {\n                          return (\n                            <Draggable key={el.id} index={index} draggableId={el.id}>\n                              {(provided, snapshot) => {\n                                console.log(snapshot)\n                                return (\n                                  <div\n                                    className={`item ${snapshot.isDragging && \"dragging\"}`}\n                                    ref={provided.innerRef}\n                                    {...provided.draggableProps}\n                                    {...provided.dragHandleProps}\n                                  >\n                                    {el.name}\n                                  </div>\n                                )\n                              }}\n                            </Draggable>\n                          )\n                        })}\n                        {provided.placeholder}\n                      </div>\n                    )\n                  }}\n                </Droppable>\n              </div>\n            )\n          })}\n        </DragDropContext>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}